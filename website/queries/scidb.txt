-- exec scidb

create temp array transform_1<value: double null, bucket:int64 null>[id=0:599,1,0, time=0:255,256,0];
create temp array transform_2<value: double null, bucket:int64 null>[id=0:599,1,0, time=0:255,256,0];
create temp array transform_3<value: double null, bucket:int64 null>[id=0:599,1,0, time=0:255,256,0];
create temp array transform_4<value: double null, bucket:int64 null>[id=0:599,1,0, time=0:255,256,0];
create temp array transform_5<value: double null, bucket:int64 null>[id=0:599,1,0, time=0:255,256,0];
create temp array transform_6<value: double null, bucket:int64 null>[id=0:599,1,0, time=0:255,256,0];
create temp array transform_7<value: double null, bucket:int64 null>[id=0:599,1,0, time=0:255,256,0];
create temp array transform_8<value: double null, bucket:int64 null>[id=0:599,1,0, time=0:255,256,0];

store(regrid(scan(SciDB__Demo__Vectors), 1, 2, avg(value) as value, bin1(value) as bucket), transform_1);
store(regrid(scan(transform_1), 1, 2, avg(value) as value, bin2(value) as bucket), transform_2);
store(regrid(scan(transform_2), 1, 2, avg(value) as value, bin4(value) as bucket), transform_3);
store(regrid(scan(transform_3), 1, 2, avg(value) as value, bin8(value) as bucket), transform_4);
store(regrid(scan(transform_4), 1, 2, avg(value) as value, bin16(value) as bucket), transform_5);
store(regrid(scan(transform_5), 1, 2, avg(value) as value, bin32(value) as bucket), transform_6);
store(regrid(scan(transform_6), 1, 2, avg(value) as value, bin64(value) as bucket), transform_7);
store(regrid(scan(transform_7), 1, 2, avg(value) as value, bin128(value) as bucket), transform_8);

store(attribute_rename(
 project(
   apply(concat(concat(concat(concat(concat(concat(concat(
     redimension(transform_1, <value:uint64 null>[id=0:599,1,0, bucket=0:9,4294967296,0], true, count(bucket) as value),
     redimension(transform_2, <value:uint64 null>[id=0:599,1,0, bucket=0:9,4294967296,0], true, count(bucket) as value)),
     redimension(transform_3, <value:uint64 null>[id=0:599,1,0, bucket=0:9,4294967296,0], true, count(bucket) as value)),
     redimension(transform_4, <value:uint64 null>[id=0:599,1,0, bucket=0:9,4294967296,0], true, count(bucket) as value)),
     redimension(transform_5, <value:uint64 null>[id=0:599,1,0, bucket=0:9,4294967296,0], true, count(bucket) as value)),
     redimension(transform_6, <value:uint64 null>[id=0:599,1,0, bucket=0:9,4294967296,0], true, count(bucket) as value)),
     redimension(transform_7, <value:uint64 null>[id=0:599,1,0, bucket=0:9,4294967296,0], true, count(bucket) as value)),
     redimension(transform_8, <value:uint64 null>[id=0:599,1,0, bucket=0:9,4294967296,0], true, count(bucket) as value)),
     signed_value, int64(value)),
   signed_value),
signed_value, value), symbols);

store(uniq(sort(project(symbols, value))), unique_values);
store(project(index_lookup(symbols, unique_values, symbols.value, value_index), value, value_index), value_indices);
store(project(unpack(aggregate(redimension(value_indices, <value:int64 null>[id,time,value_index]), count(*) as frequency, max(value) as value, value_index), index), value, frequency), frequencies);

store(redimension(apply(cross_join(redimension(value_indices, <value:int64 NULL DEFAULT null> [id,bucket,value_index]) as left,
attribute_rename(
redimension(
    project(
        index_lookup(
            frequencies,
            unique_values,
            frequencies.value,
            value_index),
        value,
        frequency,
        value_index),
    <value:int64 NULL, frequency:uint64 NULL> [index, value_index]),
value,
value_f) as right,
left.value_index,
right.value_index),
idf,
log(600.0 / frequency) * value),
<idf:double null>[id, bucket]),
tfv);

store(
attribute_rename(
project(
    apply(
        cross_join(
            tfv as _tfv,
            aggregate(
                tfv,
                avg(idf) as mean,
                stdev(idf) as std,
                id) as moments,
            _tfv.id,
            moments.id),
        normalized_value,
        (idf - mean) / std),
    normalized_value),
normalized_value,
value),
conditioned_tfv);

consume(
project(
apply(
    aggregate(
        apply(
            cross_join(
                attribute_rename(
                    cross_join(
                        conditioned_tfv as ctfv,
                        aggregate(
                            apply(
                                conditioned_tfv,
                                vv,
                                pow(value, 2)),
                            sum(vv) as ss,
                            id) as sum_squares,
                        ctfv.id,
                        sum_squares.id),
                    value,
                    value) as ctfv_ss,
                attribute_rename(
                    redimension(
                        slice(
                            conditioned_tfv,
                            id,
                            1),
                        <value: double null>[bucket]),
                    value,
                    value_test) as test_vector,
                ctfv_ss.bucket,
                test_vector.bucket),
            product,
            value * value_test),
        sum(product) as sum,
        min(ss) as ss,
        id),
    rho,
    sum / ss),
rho));

remove(transform_1);
remove(transform_2);
remove(transform_3);
remove(transform_4);
remove(transform_5);
remove(transform_6);
remove(transform_7);
remove(transform_8);